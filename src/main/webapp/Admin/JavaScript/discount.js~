document.addEventListener("DOMContentLoaded", () => {
  // Initial data loading
  loadBanners();
  loadDiscountedBooks();

  // Load books for selector (when needed)
  // Books will be loaded via AJAX when needed

  // Tab switching
  const tabBtns = document.querySelectorAll(".tab-btn");
  tabBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      // Remove active class from all tabs and contents
      document.querySelectorAll(".tab-btn").forEach((b) => b.classList.remove("active"));
      document.querySelectorAll(".tab-content").forEach((c) => c.classList.remove("active"));

      // Add active class to clicked tab and corresponding content
      btn.classList.add("active");
      const tabId = btn.getAttribute("data-tab") + "-tab";
      document.getElementById(tabId).classList.add("active");
    });
  });

  // Add banner button
  const addBannerBtn = document.getElementById("addBannerBtn");
  addBannerBtn.addEventListener("click", () => {
    document.getElementById("bannerModalTitle").textContent = "Add New Banner";
    document.getElementById("bannerForm").reset();
    document.getElementById("bannerId").value = "";
    document.getElementById("bannerImagePreview").style.backgroundImage = "";

    openModal("bannerModal");
  });

  // Add discount button
  const addDiscountBtn = document.getElementById("addDiscountBtn");
  addDiscountBtn.addEventListener("click", () => {
    document.getElementById("discountModalTitle").textContent = "Add New Discount";
    document.getElementById("discountForm").reset();
    document.getElementById("discountId").value = "";
    document.getElementById("categorySelector").classList.add("hidden");
    document.getElementById("booksSelector").classList.add("hidden");
    document.getElementById("valueType").textContent = "%";

    openModal("discountModal");
  });

  // Remove all discounts button
  const removeAllDiscountsBtn = document.getElementById("removeAllDiscountsBtn");
  removeAllDiscountsBtn.addEventListener("click", () => {
    openModal("removeAllDiscountsModal");
  });

  // Confirm remove all discounts
  const confirmRemoveAllBtn = document.getElementById("confirmRemoveAllBtn");
  confirmRemoveAllBtn.addEventListener("click", () => {
    removeAllDiscounts();
  });

  // Cancel remove all discounts
  const cancelRemoveAllBtn = document.getElementById("cancelRemoveAllBtn");
  cancelRemoveAllBtn.addEventListener("click", () => {
    closeModal(document.getElementById("removeAllDiscountsModal"));
  });

  // Discount type change
  const discountType = document.getElementById("discountType");
  discountType.addEventListener("change", function () {
    const valueType = document.getElementById("valueType");
    valueType.textContent = this.value === "percentage" ? "%" : "$";
  });

  // Apply to change
  const applyTo = document.getElementById("applyTo");
  applyTo.addEventListener("change", function () {
    const categorySelector = document.getElementById("categorySelector");
    const booksSelector = document.getElementById("booksSelector");

    categorySelector.classList.add("hidden");
    booksSelector.classList.add("hidden");

    if (this.value === "category") {
      categorySelector.classList.remove("hidden");
      // Load categories via AJAX if needed
      loadCategories();
    } else if (this.value === "books") {
      booksSelector.classList.remove("hidden");
      loadAvailableBooks();
    }
  });

  // Banner form submission
  const bannerForm = document.getElementById("bannerForm");
  bannerForm.addEventListener("submit", (e) => {
    e.preventDefault();
    saveBanner();
  });

  // Discount form submission
  const discountForm = document.getElementById("discountForm");
  discountForm.addEventListener("submit", (e) => {
    e.preventDefault();
    applyDiscount();
  });

  // Banner image preview
  const bannerImage = document.getElementById("bannerImage");
  bannerImage.addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        document.getElementById("bannerImagePreview").style.backgroundImage = `url(${e.target.result})`;
      };
      reader.readAsDataURL(file);
    }
  });

  // Books selection buttons
  const addSelectedBooksBtn = document.getElementById("addSelectedBooks");
  addSelectedBooksBtn.addEventListener("click", () => {
    moveSelectedBooks("available", "selected");
  });

  const removeSelectedBooksBtn = document.getElementById("removeSelectedBooks");
  removeSelectedBooksBtn.addEventListener("click", () => {
    moveSelectedBooks("selected", "available");
  });

  // Cancel buttons
  const cancelBannerBtn = document.getElementById("cancelBannerBtn");
  cancelBannerBtn.addEventListener("click", () => {
    closeModal(document.getElementById("bannerModal"));
  });

  const cancelDiscountBtn = document.getElementById("cancelDiscountBtn");
  cancelDiscountBtn.addEventListener("click", () => {
    closeModal(document.getElementById("discountModal"));
  });

  // Cancel delete button
  const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
  cancelDeleteBtn.addEventListener("click", () => {
    closeModal(document.getElementById("deleteModal"));
  });

  // Confirm delete button
  const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
  confirmDeleteBtn.addEventListener("click", () => {
    const type = confirmDeleteBtn.getAttribute("data-type");
    const id = Number.parseInt(confirmDeleteBtn.getAttribute("data-id"));

    if (type === "banner") {
      deleteBanner(id);
    } else if (type === "book-discount") {
      removeBookDiscount(id);
    }
  });

  // Make functions available globally
  window.editBanner = editBanner;
  window.confirmDeleteBanner = confirmDeleteBanner;
  window.removeBookDiscount = removeBookDiscount;
  window.confirmRemoveBookDiscount = confirmRemoveBookDiscount;
});

// AJAX Helper Function
function fetchData(url, options = {}) {
  const defaultOptions = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    },
    credentials: 'same-origin' // Include cookies for session management
  };

  const mergedOptions = { ...defaultOptions, ...options };

  return fetch(url, mergedOptions)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .catch(error => {
      console.error('Fetch error:', error);
      showErrorNotification('There was an error communicating with the server.');
      throw error;
    });
}

// Shows an error notification to the user
function showErrorNotification(message) {
  // Simple alert for now - can be replaced with a nicer notification UI
  alert(message);
}

// Load banners via AJAX
function loadBanners() {
  fetchData('/Admin/api/banners')
    .then(banners => {
      displayBanners(banners);
    })
    .catch(error => {
      console.error('Error loading banners:', error);
    });
}

// Load categories via AJAX
function loadCategories() {
  fetchData('/Admin/api/categories')
    .then(categories => {
      const categorySelect = document.getElementById("category");
      categorySelect.innerHTML = '<option value="">Select Category</option>';

      categories.forEach(category => {
        categorySelect.innerHTML += `<option value="${category.id}">${category.name}</option>`;
      });
    })
    .catch(error => {
      console.error('Error loading categories:', error);
    });
}

// Load available books for selection via AJAX
function loadAvailableBooks() {
  fetchData('/Admin/api/books')
    .then(books => {
      const availableBooksContainer = document.getElementById("availableBooksContainer");
      const selectedBooksContainer = document.getElementById("selectedBooksContainer");

      availableBooksContainer.innerHTML = "";
      selectedBooksContainer.innerHTML = "";

      books.forEach(book => {
        availableBooksContainer.innerHTML += `
          <div class="book-item" data-id="${book.id}">
            <img src="${book.coverImage}" alt="${book.title}">
            <span>${book.title}</span>
          </div>
        `;
      });

      // Add click event to book items
      const bookItems = availableBooksContainer.querySelectorAll(".book-item");
      bookItems.forEach(item => {
        item.addEventListener("click", function() {
          this.classList.toggle("selected");
        });
      });
    })
    .catch(error => {
      console.error('Error loading books:', error);
    });
}

// Load discounted books via AJAX
function loadDiscountedBooks() {
  fetchData('/Admin/api/books/discounted')
    .then(books => {
      const discountedBooksTable = document.getElementById("discountedBooksTable");
      discountedBooksTable.innerHTML = "";

      if (books.length === 0) {
        discountedBooksTable.innerHTML = `
          <tr>
            <td colspan="6" class="text-center">No books found.</td>
          </tr>
        `;
        return;
      }

      books.forEach(book => {
        const finalPrice = book.price * (1 - (book.discount || 0) / 100);
        const discountDisplay = book.discount > 0 ? `${book.discount}%` : "0%";

        discountedBooksTable.innerHTML += `
          <tr>
            <td><img src="${book.coverImage}" alt="${book.title}" class="book-cover"></td>
            <td>${book.title}</td>
            <td>${formatCurrency(book.price)}</td>
            <td>${discountDisplay}</td>
            <td>${formatCurrency(finalPrice)}</td>
            <td>
              <div class="action-buttons">
                ${book.discount > 0 ? `<button class="btn btn-danger" onclick="confirmRemoveBookDiscount(${book.id})">Remove Discount</button>` : ""}
              </div>
            </td>
          </tr>
        `;
      });
    })
    .catch(error => {
      console.error('Error loading discounted books:', error);
    });
}

// Move selected books between containers
function moveSelectedBooks(fromType, toType) {
  const fromContainer = document.getElementById(`${fromType}BooksContainer`);
  const toContainer = document.getElementById(`${toType}BooksContainer`);
  const selectedBooks = fromContainer.querySelectorAll(".book-item.selected");

  selectedBooks.forEach(book => {
    book.classList.remove("selected");
    toContainer.appendChild(book);

    // Re-add click event
    book.addEventListener("click", function() {
      this.classList.toggle("selected");
    });
  });
}

// Display banners in the table
function displayBanners(banners) {
  const bannersTable = document.getElementById("bannersTable");
  bannersTable.innerHTML = "";

  banners.forEach(banner => {
    bannersTable.innerHTML += `
      <tr>
        <td>${banner.id}</td>
        <td><img src="${banner.image}" alt="${banner.title}" class="banner-thumbnail"></td>
        <td>${banner.title}</td>
        <td>
          <div class="action-buttons">
            <button class="btn" onclick="editBanner(${banner.id})">Edit</button>
            <button class="btn btn-danger" onclick="confirmDeleteBanner(${banner.id})">Delete</button>
          </div>
        </td>
      </tr>
    `;
  });
}

// Edit banner
function editBanner(id) {
  fetchData(`/Admin/api/banners/${id}`)
    .then(banner => {
      document.getElementById("bannerModalTitle").textContent = "Edit Banner";
      document.getElementById("bannerId").value = banner.id;
      document.getElementById("bannerTitle").value = banner.title;
      document.getElementById("bannerText").value = banner.text || "";

      // Set banner image preview
      if (banner.image) {
        document.getElementById("bannerImagePreview").style.backgroundImage = `url(${banner.image})`;
      }

      openModal("bannerModal");
    })
    .catch(error => {
      console.error('Error loading banner details:', error);
    });
}

// Confirm delete banner
function confirmDeleteBanner(id) {
  document.getElementById("deleteMessage").textContent =
    "Are you sure you want to delete this banner? This action cannot be undone.";
  document.getElementById("confirmDeleteBtn").setAttribute("data-type", "banner");
  document.getElementById("confirmDeleteBtn").setAttribute("data-id", id);
  openModal("deleteModal");
}

// Confirm remove book discount
function confirmRemoveBookDiscount(id) {
  document.getElementById("deleteMessage").textContent = "Are you sure you want to remove the discount from this book?";
  document.getElementById("confirmDeleteBtn").setAttribute("data-type", "book-discount");
  document.getElementById("confirmDeleteBtn").setAttribute("data-id", id);
  openModal("deleteModal");
}

// Delete banner
function deleteBanner(id) {
  fetchData(`/Admin/api/banners/${id}`, { method: 'DELETE' })
    .then(() => {
      closeModal(document.getElementById("deleteModal"));
      loadBanners();
    })
    .catch(error => {
      console.error('Error deleting banner:', error);
    });
}

// Remove book discount
function removeBookDiscount(id) {
  fetchData(`/Admin/api/books/discounts`, { method: 'DELETE' })
    .then(() => {
      closeModal(document.getElementById("deleteModal"));
      loadDiscountedBooks();
    })
    .catch(error => {
      console.error('Error removing book discount:', error);
    });
}

// Remove all discounts
function removeAllDiscounts() {
  fetchData('/Admin/api/books/discounts', { method: 'DELETE' })
    .then(() => {
      closeModal(document.getElementById("removeAllDiscountsModal"));
      loadDiscountedBooks();
      alert("All discounts have been removed from books.");
    })
    .catch(error => {
      console.error('Error removing all discounts:', error);
    });
}

// Save banner
function saveBanner() {
  const bannerForm = document.getElementById("bannerForm");
  const formData = new FormData(bannerForm);

  const bannerId = document.getElementById("bannerId").value;
  const url = bannerId ? `/Admin/api/banners/${bannerId}` : '/Admin/api/banners';
  const method = bannerId ? 'PUT' : 'POST';

  // For file uploads, we use FormData instead of JSON
  fetch(url, {
    method: method,
    body: formData,
    credentials: 'same-origin'
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(() => {
      closeModal(document.getElementById("bannerModal"));
      loadBanners();
    })
    .catch(error => {
      console.error('Error saving banner:', error);
      showErrorNotification('There was an error saving the banner.');
    });
}

// Apply discount
function applyDiscount() {
  const discountType = document.getElementById("discountType").value;
  const discountValue = Number.parseFloat(document.getElementById("discountValue").value);
  const discountOperation = document.getElementById("discountOperation").value;
  const applyTo = document.getElementById("applyTo").value;

  let categoryId = null;
  let bookIds = [];

  if (applyTo === "category") {
    categoryId = document.getElementById("category").value;
  } else if (applyTo === "books") {
    const selectedBooksContainer = document.getElementById("selectedBooksContainer");
    const selectedBooks = selectedBooksContainer.querySelectorAll(".book-item");
    bookIds = Array.from(selectedBooks).map(book => Number.parseInt(book.getAttribute("data-id")));
  }

  const discountData = {
    discountType,
    discountValue,
    discountOperation,
    applyTo,
    categoryId,
    bookIds
  };

  fetchData('/Admin/api/discounts', {
    method: 'POST',
    body: JSON.stringify(discountData)
  })
    .then(() => {
      closeModal(document.getElementById("discountModal"));
      loadDiscountedBooks();
    })
    .catch(error => {
      console.error('Error applying discount:', error);
    });
}

// Helper functions
function openModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.style.display = "block";
  document.body.style.overflow = "hidden";
}

function closeModal(modal) {
  modal.style.display = "none";
  document.body.style.overflow = "auto";
}

function formatDate(dateString) {
  const date = new Date(dateString);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}

function formatCurrency(number) {
  return new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(number);
}