package jets.projects.admin_user;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jets.projects.dal.UsersDAL;

public class AdminLogin extends HttpServlet {

    private final UsersDAL usersDAL = new UsersDAL();

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String adminUsername = request.getParameter("username");
        String password = request.getParameter("password");

        System.out.println("username: " + adminUsername);
        System.out.println("password: " + password);

        String error = checkInputForError(adminUsername, password);
        if (error != null) {
            response.sendRedirect(request.getContextPath() + AdminURLMapper.LOGIN_PAGE +
                    "?errorMessage=" + URLEncoder.encode(error, "UTF-8"));
            return;
        }

        if (adminUsername.trim().equals("admin") && password.trim().equals("admin123")) {

            HttpSession session = request.getSession(false);
            if (session != null) {
                session.invalidate();
            }
            session = request.getSession(true);
            session.setAttribute("adminID", adminUsername);
            session.setAttribute("adminLoggedIn", "true");

            System.out.println("Session adminID set to: " + session.getAttribute("adminID"));
            response.sendRedirect(request.getContextPath() + AdminURLMapper.DASHBOARD_PAGE);
        } else {
            response.sendRedirect(request.getContextPath() + AdminURLMapper.LOGIN_PAGE +
                    "?errorMessage=" + URLEncoder.encode("Invalid username or password", "UTF-8"));
        }
    }

    private String checkInputForError(String adminUsername, String password) {
        if (adminUsername == null || adminUsername.trim().isEmpty()) {
            return "Username must be provided and cannot be empty.";
        }
        if (password == null || password.trim().isEmpty()) {
            return "Password must be provided and cannot be empty.";
        }
        return null;
    }
}
